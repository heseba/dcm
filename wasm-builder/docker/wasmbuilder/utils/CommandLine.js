'use strict';

class CommandLine {
  static #allowedCliParams = {
    help: {
      label: 'Help',
      params: ['-h', '--help'],
      description: 'Print this help message.',
    },
    cfd: {
      label: 'Path to your Code-Fragment-Description',
      params: ['-cfd', '--codefragmentdescription'],
      description: 'default: looking in current directory',
    },
    plugins: {
      label: 'Output path for the parsed go plugin modules',
      params: ['-p', '--plugins'],
      description: 'default: ./tmp/plugintemp',
    },
    temp: {
      label: 'Output path for the parsed go wasm modules',
      params: ['-t', '--temp'],
      description: 'default: ./tmp/gotemp',
    },
    export: {
      label: 'The export json file generated by the GoParser',
      params: ['-e', '--export'],
      description: 'default: ./tmp',
    },
  };

  /**
   *  Calculates the highest amount of characters for each param key.
   *
   * @param {object} obj Object of allowed CLI Parameters
   * @return {object} Object with each param key and the highest string length.
   * @example {label: 10, params: 5, description: 45}
   */
  static #calcMaxStringLengthOfCliParamObjects() {
    const Utils = require('./Utils');

    const createObjOfAllCliParamKeys = (cliParams) => {
      let result = {};
      for (const [_, paramObj] of Object.entries(cliParams))
        for (const [paramKey, _] of Object.entries(paramObj))
          Utils.isUndefined(result[paramKey]) ? (result[paramKey] = 0) : null;

      return result;
    };

    // initiate object with e.g. {label: 0, params: 0, description: 0}
    const maxStringLengths = createObjOfAllCliParamKeys(this.#allowedCliParams);

    // find string with most characters (length)
    for (const [_, paramObj] of Object.entries(this.#allowedCliParams)) {
      for (const [paramKey, _] of Object.entries(paramObj)) {
        paramObj[paramKey].toString().length > maxStringLengths[paramKey]
          ? (maxStringLengths[paramKey] = paramObj[paramKey].toString().length)
          : maxStringLengths[paramKey];
      }
    }

    return maxStringLengths;
  }

  static printHelpMessage() {
    console.log('\nAvailable CLI Parameters:');

    const maxStringLengths = this.#calcMaxStringLengthOfCliParamObjects();

    let outputStr = '';
    // build output string
    for (const [cliParam, paramObj] of Object.entries(this.#allowedCliParams)) {
      for (const [paramKey, _] of Object.entries(paramObj)) {
        outputStr += `${paramObj[paramKey]}${''.padEnd(
          maxStringLengths[paramKey] - paramObj[paramKey].toString().length
        )}`;

        // add tabs after each column and a newline at the end of the row but not on the last element of the allowedCliParams
        Object.keys(paramObj).indexOf(paramKey) ===
          Object.keys(paramObj).length - 1 &&
        Object.keys(this.#allowedCliParams).indexOf(cliParam) !==
          Object.keys(this.#allowedCliParams).length - 1
          ? (outputStr += '\n')
          : (outputStr += '\t');
      }
    }

    console.log(outputStr);
  }

  static handleCliParameters(cliParams) {
    const Debug = require('./Debug');

    if (cliParams.length === 0) {
      return undefined;
    }

    let params = {};
    let isParameterUnknown = true;

    cliParams.forEach((cli, i, cliParamsArray) => {
      // just care about parameters, not values => skipping values
      i % 2 === 0 ? (isParameterUnknown = true) : (isParameterUnknown = false);

      // iterate allowed params
      for (const [paramKey, paramObj] of Object.entries(
        this.#allowedCliParams
      )) {
        // if the passed parameter is part of the allowedCliParams
        if (paramObj.params.includes(cli)) {
          // error if no value is provided except on the help parameter
          if (
            cliParams.length == 1 &&
            this.#allowedCliParams.help.params.includes(cli)
          ) {
            this.printHelpMessage();
            process.exit(1);
          }
          // error if the help parameter is combined with other parameters
          else if (paramKey === 'help') {
            Debug.printInfo(
              `To display the help message only pass: "-h" or "--help".`
            );
          }
          // error if the parameter is used twice
          else if (params[paramKey])
            Debug.printInfo(`Already using parameter: "${paramKey}".`);
          // error if the value is empty or only dashes
          else if (
            cliParamsArray[i + 1] === '' ||
            cliParamsArray[i + 1] === undefined ||
            /^-{1,2}$/.test(cliParamsArray[i + 1])
          ) {
            Debug.printInfo(
              `Value: "${
                cliParamsArray[i + 1]
              }" is missing or invalid for parameter: "${paramKey}".`
            );
          }
          isParameterUnknown = false;
          params[paramKey] = cliParamsArray[i + 1];
        }
      }

      if (isParameterUnknown) {
        Debug.printInfo(`Unknown parameter: "${cli}".`);
      }
    });

    return params;
  }
}

module.exports = CommandLine;
